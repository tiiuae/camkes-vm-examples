/*
 * Copyright 2017, Data61, CSIRO (ABN 41 687 119 230)
 *
 * SPDX-License-Identifier: BSD-2-Clause
 */

#include <configurations/vm.h>

import <std_connector.camkes>;
import <global-connectors.camkes>;
import <vm-connectors.camkes>;
import <VM_Arm/VM.camkes>;
import <devices.camkes>;

assembly {
    composition {
        VM_GENERAL_COMPOSITION_DEF()
        VM_COMPOSITION_DEF(0)
        connection seL4VMDTBPassthrough vm_dtb(from vm0.dtb_self, to vm0.dtb);
    }
    configuration {
        VM_GENERAL_CONFIGURATION_DEF()
        VM_CONFIGURATION_DEF(0)

#if KERNELARMPLATFORM_RPI4
        vm0.num_vcpus = 4;
#endif
        vm0.num_extra_frame_caps = 0;
        vm0.extra_frame_map_address = 0;
        /*
         * TODO: changing cnode_size_bits from 23 -> 18 solved
         * the 2M frame mapping issue on RPi4. Figure out why.
         * Also the 12bit pools were not necessary after all.
         */
        // This controls the amount of CSlots - if this is too small, then
        // allocation will even though 'simple_untyped<N>_pool' size would be
        // enough. Note: 18 bits is not enough for 512MB.
        vm0.cnode_size_bits = 23;

        // VM can use these 'simple_untyped<N>_pool' to allocate RAM too,
        // if RAM size is larger than allocated 'untyped_mmios'. If using
        // these pools for VM RAM, it is a good idea to leave some for VMM
        // (not sure if uses those).
        //
        // Use different sized pools to adjust the the size required by RAM.
        // For example. To allocate 64MB, one can just have one:
        // vm0.simple_untyped26_pool = 1;
        // or four 16MB regions
        // vm0.simple_untyped24_pool = 4;
        //
        // However VMM seems to need some untyped pool as well, so make sure to
        // allocate some extra too.
        //
        // Here we allocate 256MB (16) + some extra for VMM (4) = 20.
        vm0.simple_untyped24_pool = 20;
        //vm0.simple_untyped12_pool = 12;
    }
}
